{"ast":null,"code":"var _jsxFileName = \"/home/pk4548/pk/pk/codes/dijekstra_pathfinding/Pathfinding-Visualizer-Tutorial-master/src/PathfindingVisualizer/Path2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nconst Path2 = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  useEffect(() => {\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n  }, []);\n  const handleMouseDown = (row, col) => {\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n    setMouseIsPressed(true);\n  };\n  const handleMouseEnter = (row, col) => {\n    if (!mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n  };\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  };\n  const animateShortestPath = nodesInShortestPathOrder => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  };\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  };\n  const visualizeDijkstra = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: visualizeDijkstra,\n      children: \"Visualize Dijkstra's Algorithm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: grid.map((row, rowIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: row.map((node, nodeIdx) => /*#__PURE__*/_jsxDEV(Node, {\n          col: node.col,\n          isFinish: node.isFinish,\n          isStart: node.isStart,\n          isWall: node.isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: () => handleMouseDown(node.row, node.col),\n          onMouseEnter: () => handleMouseEnter(node.row, node.col),\n          onMouseUp: handleMouseUp,\n          row: node.row\n        }, nodeIdx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this))\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Path2, \"sUe7Y0YITgK5Ud1O35j7A7sMCSk=\");\n_c = Path2;\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\nexport default Path2;\nvar _c;\n$RefreshReg$(_c, \"Path2\");","map":{"version":3,"names":["React","useState","useEffect","Node","dijkstra","getNodesInShortestPathOrder","jsxDEV","_jsxDEV","Fragment","_Fragment","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","Path2","_s","grid","setGrid","mouseIsPressed","setMouseIsPressed","initialGrid","getInitialGrid","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateShortestPath","nodesInShortestPathOrder","i","length","setTimeout","node","document","getElementById","className","animateDijkstra","visitedNodesInOrder","visualizeDijkstra","startNode","finishNode","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIdx","nodeIdx","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","_c","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode","$RefreshReg$"],"sources":["/home/pk4548/pk/pk/codes/dijekstra_pathfinding/Pathfinding-Visualizer-Tutorial-master/src/PathfindingVisualizer/Path2.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nconst Path2 = () => {\n  const [grid, setGrid] = useState([]);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  \n\n  useEffect(() => {\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n  }, []);\n\n  const handleMouseDown = (row, col) => {\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n    setMouseIsPressed(true);\n  };\n   \n  const handleMouseEnter = (row, col) => {\n    if (!mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n  };\n\n  const handleMouseUp = () => {\n    setMouseIsPressed(false);\n  };\n  \n  const animateShortestPath = (nodesInShortestPathOrder) => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-shortest-path';\n        }, 50 * i);\n      }\n  };\n\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n          setTimeout(() => {\n            animateShortestPath(nodesInShortestPathOrder);\n          }, 10 * i);\n          return;\n        }\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-visited';\n        }, 10 * i);\n      }\n  };\n\n\n\n  const visualizeDijkstra = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  };\n\n  return (\n    <>\n      <button onClick={visualizeDijkstra}>Visualize Dijkstra's Algorithm</button>\n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => (\n          <div key={rowIdx}>\n            {row.map((node, nodeIdx) => (\n              <Node\n                key={nodeIdx}\n                col={node.col}\n                isFinish={node.isFinish}\n                isStart={node.isStart}\n                isWall={node.isWall}\n                mouseIsPressed={mouseIsPressed}\n                onMouseDown={() => handleMouseDown(node.row, node.col)}\n                onMouseEnter={() => handleMouseEnter(node.row, node.col)}\n                onMouseUp={handleMouseUp}\n                row={node.row}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(col, row));\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n  \n  const createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      distance: Infinity,\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n    };\n  };\n  \n  const getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n  };\n  \n\nexport default Path2;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,QAAQ,EAAEC,2BAA2B,QAAQ,wBAAwB;AAC9E,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErC,MAAMC,cAAc,GAAG,EAAE;AACzB,MAAMC,cAAc,GAAG,EAAE;AACzB,MAAMC,eAAe,GAAG,EAAE;AAC1B,MAAMC,eAAe,GAAG,EAAE;AAE1B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAG3DC,SAAS,CAAC,MAAM;IACd,MAAMkB,WAAW,GAAGC,cAAc,CAAC,CAAC;IACpCJ,OAAO,CAACG,WAAW,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACpC,MAAMC,OAAO,GAAGC,yBAAyB,CAACV,IAAI,EAAEO,GAAG,EAAEC,GAAG,CAAC;IACzDP,OAAO,CAACQ,OAAO,CAAC;IAChBN,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAMQ,gBAAgB,GAAGA,CAACJ,GAAG,EAAEC,GAAG,KAAK;IACrC,IAAI,CAACN,cAAc,EAAE;IACrB,MAAMO,OAAO,GAAGC,yBAAyB,CAACV,IAAI,EAAEO,GAAG,EAAEC,GAAG,CAAC;IACzDP,OAAO,CAACQ,OAAO,CAAC;EAClB,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1BT,iBAAiB,CAAC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMU,mBAAmB,GAAIC,wBAAwB,IAAK;IACxD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,wBAAwB,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACtDE,UAAU,CAAC,MAAM;QACf,MAAMC,IAAI,GAAGJ,wBAAwB,CAACC,CAAC,CAAC;QACxCI,QAAQ,CAACC,cAAc,CAAE,QAAOF,IAAI,CAACX,GAAI,IAAGW,IAAI,CAACV,GAAI,EAAC,CAAC,CAACa,SAAS,GAC/D,yBAAyB;MAC7B,CAAC,EAAE,EAAE,GAAGN,CAAC,CAAC;IACZ;EACJ,CAAC;EAED,MAAMO,eAAe,GAAGA,CAACC,mBAAmB,EAAET,wBAAwB,KAAK;IACzE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIQ,mBAAmB,CAACP,MAAM,EAAED,CAAC,EAAE,EAAE;MAClD,IAAIA,CAAC,KAAKQ,mBAAmB,CAACP,MAAM,EAAE;QACpCC,UAAU,CAAC,MAAM;UACfJ,mBAAmB,CAACC,wBAAwB,CAAC;QAC/C,CAAC,EAAE,EAAE,GAAGC,CAAC,CAAC;QACV;MACF;MACAE,UAAU,CAAC,MAAM;QACf,MAAMC,IAAI,GAAGK,mBAAmB,CAACR,CAAC,CAAC;QACnCI,QAAQ,CAACC,cAAc,CAAE,QAAOF,IAAI,CAACX,GAAI,IAAGW,IAAI,CAACV,GAAI,EAAC,CAAC,CAACa,SAAS,GAC/D,mBAAmB;MACvB,CAAC,EAAE,EAAE,GAAGN,CAAC,CAAC;IACZ;EACJ,CAAC;EAID,MAAMS,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,SAAS,GAAGzB,IAAI,CAACN,cAAc,CAAC,CAACC,cAAc,CAAC;IACtD,MAAM+B,UAAU,GAAG1B,IAAI,CAACJ,eAAe,CAAC,CAACC,eAAe,CAAC;IACzD,MAAM0B,mBAAmB,GAAGnC,QAAQ,CAACY,IAAI,EAAEyB,SAAS,EAAEC,UAAU,CAAC;IACjE,MAAMZ,wBAAwB,GAAGzB,2BAA2B,CAACqC,UAAU,CAAC;IACxEJ,eAAe,CAACC,mBAAmB,EAAET,wBAAwB,CAAC;EAChE,CAAC;EAED,oBACEvB,OAAA,CAAAE,SAAA;IAAAkC,QAAA,gBACEpC,OAAA;MAAQqC,OAAO,EAAEJ,iBAAkB;MAAAG,QAAA,EAAC;IAA8B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3EzC,OAAA;MAAK8B,SAAS,EAAC,MAAM;MAAAM,QAAA,EAClB3B,IAAI,CAACiC,GAAG,CAAC,CAAC1B,GAAG,EAAE2B,MAAM,kBACpB3C,OAAA;QAAAoC,QAAA,EACGpB,GAAG,CAAC0B,GAAG,CAAC,CAACf,IAAI,EAAEiB,OAAO,kBACrB5C,OAAA,CAACJ,IAAI;UAEHqB,GAAG,EAAEU,IAAI,CAACV,GAAI;UACd4B,QAAQ,EAAElB,IAAI,CAACkB,QAAS;UACxBC,OAAO,EAAEnB,IAAI,CAACmB,OAAQ;UACtBC,MAAM,EAAEpB,IAAI,CAACoB,MAAO;UACpBpC,cAAc,EAAEA,cAAe;UAC/BqC,WAAW,EAAEA,CAAA,KAAMjC,eAAe,CAACY,IAAI,CAACX,GAAG,EAAEW,IAAI,CAACV,GAAG,CAAE;UACvDgC,YAAY,EAAEA,CAAA,KAAM7B,gBAAgB,CAACO,IAAI,CAACX,GAAG,EAAEW,IAAI,CAACV,GAAG,CAAE;UACzDiC,SAAS,EAAE7B,aAAc;UACzBL,GAAG,EAAEW,IAAI,CAACX;QAAI,GATT4B,OAAO;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUb,CACF;MAAC,GAdME,MAAM;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAeX,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAACjC,EAAA,CAvFID,KAAK;AAAA4C,EAAA,GAAL5C,KAAK;AAyFX,MAAMO,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAML,IAAI,GAAG,EAAE;EACf,KAAK,IAAIO,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;IACjC,MAAMoC,UAAU,GAAG,EAAE;IACrB,KAAK,IAAInC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;MACjCmC,UAAU,CAACC,IAAI,CAACC,UAAU,CAACrC,GAAG,EAAED,GAAG,CAAC,CAAC;IACvC;IACAP,IAAI,CAAC4C,IAAI,CAACD,UAAU,CAAC;EACvB;EACA,OAAO3C,IAAI;AACb,CAAC;AAED,MAAM6C,UAAU,GAAGA,CAACrC,GAAG,EAAED,GAAG,KAAK;EAC/B,OAAO;IACLC,GAAG;IACHD,GAAG;IACH8B,OAAO,EAAE9B,GAAG,KAAKb,cAAc,IAAIc,GAAG,KAAKb,cAAc;IACzDyC,QAAQ,EAAE7B,GAAG,KAAKX,eAAe,IAAIY,GAAG,KAAKX,eAAe;IAC5DiD,QAAQ,EAAEC,QAAQ;IAClBC,SAAS,EAAE,KAAK;IAChBV,MAAM,EAAE,KAAK;IACbW,YAAY,EAAE;EAChB,CAAC;AACH,CAAC;AAED,MAAMvC,yBAAyB,GAAGA,CAACV,IAAI,EAAEO,GAAG,EAAEC,GAAG,KAAK;EACpD,MAAMC,OAAO,GAAGT,IAAI,CAACkD,KAAK,CAAC,CAAC;EAC5B,MAAMhC,IAAI,GAAGT,OAAO,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC;EAC9B,MAAM2C,OAAO,GAAG;IACd,GAAGjC,IAAI;IACPoB,MAAM,EAAE,CAACpB,IAAI,CAACoB;EAChB,CAAC;EACD7B,OAAO,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,GAAG2C,OAAO;EAC3B,OAAO1C,OAAO;AAChB,CAAC;AAGH,eAAeX,KAAK;AAAC,IAAA4C,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}